// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MedicalRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MedicalRecord entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MedicalRecord entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MedicalRecord", id.toString(), this);
  }

  static load(id: string): MedicalRecord | null {
    return store.get("MedicalRecord", id) as MedicalRecord | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get docCID(): BigInt {
    let value = this.get("docCID");
    return value.toBigInt();
  }

  set docCID(value: BigInt) {
    this.set("docCID", Value.fromBigInt(value));
  }

  get verifyingKey(): Bytes {
    let value = this.get("verifyingKey");
    return value.toBytes();
  }

  set verifyingKey(value: Bytes) {
    this.set("verifyingKey", Value.fromBytes(value));
  }

  get publicKey(): Bytes {
    let value = this.get("publicKey");
    return value.toBytes();
  }

  set publicKey(value: Bytes) {
    this.set("publicKey", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get hasAccess(): Array<Bytes> {
    let value = this.get("hasAccess");
    return value.toBytesArray();
  }

  set hasAccess(value: Array<Bytes>) {
    this.set("hasAccess", Value.fromBytesArray(value));
  }

  get accessRequested(): Array<Bytes> {
    let value = this.get("accessRequested");
    return value.toBytesArray();
  }

  set accessRequested(value: Array<Bytes>) {
    this.set("accessRequested", Value.fromBytesArray(value));
  }
}
